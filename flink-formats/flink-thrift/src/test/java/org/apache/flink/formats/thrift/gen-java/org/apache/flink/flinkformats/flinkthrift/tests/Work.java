/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flink.flinkformats.flinkthrift.tests;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-19")
public class Work implements org.apache.thrift.TBase<Work, Work._Fields>, java.io.Serializable, Cloneable, Comparable<Work> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Work");

  private static final org.apache.thrift.protocol.TField WORKID_FIELD_DESC = new org.apache.thrift.protocol.TField("workid", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("num2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATES_FIELD_DESC = new org.apache.thrift.protocol.TField("dates", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("tasks", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("mapping", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("codes", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WorkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WorkTupleSchemeFactory();

  public long workid; // required
  public int num1; // required
  public int num2; // required
  /**
   * 
   * @see Operation
   */
  public @org.apache.thrift.annotation.Nullable Operation op; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String comment; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> dates; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<Task> tasks; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.Long> mapping; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer codes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WORKID((short)8, "workid"),
    NUM1((short)1, "num1"),
    NUM2((short)2, "num2"),
    /**
     * 
     * @see Operation
     */
    OP((short)3, "op"),
    COMMENT((short)4, "comment"),
    DATES((short)5, "dates"),
    TASKS((short)6, "tasks"),
    MAPPING((short)7, "mapping"),
    CODES((short)10, "codes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 8: // WORKID
          return WORKID;
        case 1: // NUM1
          return NUM1;
        case 2: // NUM2
          return NUM2;
        case 3: // OP
          return OP;
        case 4: // COMMENT
          return COMMENT;
        case 5: // DATES
          return DATES;
        case 6: // TASKS
          return TASKS;
        case 7: // MAPPING
          return MAPPING;
        case 10: // CODES
          return CODES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WORKID_ISSET_ID = 0;
  private static final int __NUM1_ISSET_ID = 1;
  private static final int __NUM2_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENT,_Fields.DATES,_Fields.TASKS,_Fields.MAPPING,_Fields.CODES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WORKID, new org.apache.thrift.meta_data.FieldMetaData("workid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM2, new org.apache.thrift.meta_data.FieldMetaData("num2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Operation.class)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATES, new org.apache.thrift.meta_data.FieldMetaData("dates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TASKS, new org.apache.thrift.meta_data.FieldMetaData("tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class))));
    tmpMap.put(_Fields.MAPPING, new org.apache.thrift.meta_data.FieldMetaData("mapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CODES, new org.apache.thrift.meta_data.FieldMetaData("codes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Work.class, metaDataMap);
  }

  public Work() {
    this.num1 = 0;

  }

  public Work(
    long workid,
    int num1,
    int num2,
    Operation op)
  {
    this();
    this.workid = workid;
    setWorkidIsSet(true);
    this.num1 = num1;
    setNum1IsSet(true);
    this.num2 = num2;
    setNum2IsSet(true);
    this.op = op;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Work(Work other) {
    __isset_bitfield = other.__isset_bitfield;
    this.workid = other.workid;
    this.num1 = other.num1;
    this.num2 = other.num2;
    if (other.isSetOp()) {
      this.op = other.op;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetDates()) {
      java.util.List<java.lang.String> __this__dates = new java.util.ArrayList<java.lang.String>(other.dates);
      this.dates = __this__dates;
    }
    if (other.isSetTasks()) {
      java.util.Set<Task> __this__tasks = new java.util.HashSet<Task>(other.tasks.size());
      for (Task other_element : other.tasks) {
        __this__tasks.add(new Task(other_element));
      }
      this.tasks = __this__tasks;
    }
    if (other.isSetMapping()) {
      java.util.Map<java.lang.Long,java.lang.Long> __this__mapping = new java.util.HashMap<java.lang.Long,java.lang.Long>(other.mapping);
      this.mapping = __this__mapping;
    }
    if (other.isSetCodes()) {
      this.codes = org.apache.thrift.TBaseHelper.copyBinary(other.codes);
    }
  }

  public Work deepCopy() {
    return new Work(this);
  }

  @Override
  public void clear() {
    setWorkidIsSet(false);
    this.workid = 0;
    this.num1 = 0;

    setNum2IsSet(false);
    this.num2 = 0;
    this.op = null;
    this.comment = null;
    this.dates = null;
    this.tasks = null;
    this.mapping = null;
    this.codes = null;
  }

  public long getWorkid() {
    return this.workid;
  }

  public Work setWorkid(long workid) {
    this.workid = workid;
    setWorkidIsSet(true);
    return this;
  }

  public void unsetWorkid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WORKID_ISSET_ID);
  }

  /** Returns true if field workid is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WORKID_ISSET_ID);
  }

  public void setWorkidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WORKID_ISSET_ID, value);
  }

  public int getNum1() {
    return this.num1;
  }

  public Work setNum1(int num1) {
    this.num1 = num1;
    setNum1IsSet(true);
    return this;
  }

  public void unsetNum1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
  }

  /** Returns true if field num1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
  }

  public void setNum1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
  }

  public int getNum2() {
    return this.num2;
  }

  public Work setNum2(int num2) {
    this.num2 = num2;
    setNum2IsSet(true);
    return this;
  }

  public void unsetNum2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
  }

  /** Returns true if field num2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNum2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
  }

  public void setNum2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
  }

  /**
   * 
   * @see Operation
   */
  @org.apache.thrift.annotation.Nullable
  public Operation getOp() {
    return this.op;
  }

  /**
   * 
   * @see Operation
   */
  public Work setOp(@org.apache.thrift.annotation.Nullable Operation op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getComment() {
    return this.comment;
  }

  public Work setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public int getDatesSize() {
    return (this.dates == null) ? 0 : this.dates.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDatesIterator() {
    return (this.dates == null) ? null : this.dates.iterator();
  }

  public void addToDates(java.lang.String elem) {
    if (this.dates == null) {
      this.dates = new java.util.ArrayList<java.lang.String>();
    }
    this.dates.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDates() {
    return this.dates;
  }

  public Work setDates(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> dates) {
    this.dates = dates;
    return this;
  }

  public void unsetDates() {
    this.dates = null;
  }

  /** Returns true if field dates is set (has been assigned a value) and false otherwise */
  public boolean isSetDates() {
    return this.dates != null;
  }

  public void setDatesIsSet(boolean value) {
    if (!value) {
      this.dates = null;
    }
  }

  public int getTasksSize() {
    return (this.tasks == null) ? 0 : this.tasks.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Task> getTasksIterator() {
    return (this.tasks == null) ? null : this.tasks.iterator();
  }

  public void addToTasks(Task elem) {
    if (this.tasks == null) {
      this.tasks = new java.util.HashSet<Task>();
    }
    this.tasks.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<Task> getTasks() {
    return this.tasks;
  }

  public Work setTasks(@org.apache.thrift.annotation.Nullable java.util.Set<Task> tasks) {
    this.tasks = tasks;
    return this;
  }

  public void unsetTasks() {
    this.tasks = null;
  }

  /** Returns true if field tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTasks() {
    return this.tasks != null;
  }

  public void setTasksIsSet(boolean value) {
    if (!value) {
      this.tasks = null;
    }
  }

  public int getMappingSize() {
    return (this.mapping == null) ? 0 : this.mapping.size();
  }

  public void putToMapping(long key, long val) {
    if (this.mapping == null) {
      this.mapping = new java.util.HashMap<java.lang.Long,java.lang.Long>();
    }
    this.mapping.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,java.lang.Long> getMapping() {
    return this.mapping;
  }

  public Work setMapping(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,java.lang.Long> mapping) {
    this.mapping = mapping;
    return this;
  }

  public void unsetMapping() {
    this.mapping = null;
  }

  /** Returns true if field mapping is set (has been assigned a value) and false otherwise */
  public boolean isSetMapping() {
    return this.mapping != null;
  }

  public void setMappingIsSet(boolean value) {
    if (!value) {
      this.mapping = null;
    }
  }

  public byte[] getCodes() {
    setCodes(org.apache.thrift.TBaseHelper.rightSize(codes));
    return codes == null ? null : codes.array();
  }

  public java.nio.ByteBuffer bufferForCodes() {
    return org.apache.thrift.TBaseHelper.copyBinary(codes);
  }

  public Work setCodes(byte[] codes) {
    this.codes = codes == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(codes.clone());
    return this;
  }

  public Work setCodes(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer codes) {
    this.codes = org.apache.thrift.TBaseHelper.copyBinary(codes);
    return this;
  }

  public void unsetCodes() {
    this.codes = null;
  }

  /** Returns true if field codes is set (has been assigned a value) and false otherwise */
  public boolean isSetCodes() {
    return this.codes != null;
  }

  public void setCodesIsSet(boolean value) {
    if (!value) {
      this.codes = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case WORKID:
      if (value == null) {
        unsetWorkid();
      } else {
        setWorkid((java.lang.Long)value);
      }
      break;

    case NUM1:
      if (value == null) {
        unsetNum1();
      } else {
        setNum1((java.lang.Integer)value);
      }
      break;

    case NUM2:
      if (value == null) {
        unsetNum2();
      } else {
        setNum2((java.lang.Integer)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((Operation)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((java.lang.String)value);
      }
      break;

    case DATES:
      if (value == null) {
        unsetDates();
      } else {
        setDates((java.util.List<java.lang.String>)value);
      }
      break;

    case TASKS:
      if (value == null) {
        unsetTasks();
      } else {
        setTasks((java.util.Set<Task>)value);
      }
      break;

    case MAPPING:
      if (value == null) {
        unsetMapping();
      } else {
        setMapping((java.util.Map<java.lang.Long,java.lang.Long>)value);
      }
      break;

    case CODES:
      if (value == null) {
        unsetCodes();
      } else {
        if (value instanceof byte[]) {
          setCodes((byte[])value);
        } else {
          setCodes((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WORKID:
      return getWorkid();

    case NUM1:
      return getNum1();

    case NUM2:
      return getNum2();

    case OP:
      return getOp();

    case COMMENT:
      return getComment();

    case DATES:
      return getDates();

    case TASKS:
      return getTasks();

    case MAPPING:
      return getMapping();

    case CODES:
      return getCodes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WORKID:
      return isSetWorkid();
    case NUM1:
      return isSetNum1();
    case NUM2:
      return isSetNum2();
    case OP:
      return isSetOp();
    case COMMENT:
      return isSetComment();
    case DATES:
      return isSetDates();
    case TASKS:
      return isSetTasks();
    case MAPPING:
      return isSetMapping();
    case CODES:
      return isSetCodes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Work)
      return this.equals((Work)that);
    return false;
  }

  public boolean equals(Work that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_workid = true;
    boolean that_present_workid = true;
    if (this_present_workid || that_present_workid) {
      if (!(this_present_workid && that_present_workid))
        return false;
      if (this.workid != that.workid)
        return false;
    }

    boolean this_present_num1 = true;
    boolean that_present_num1 = true;
    if (this_present_num1 || that_present_num1) {
      if (!(this_present_num1 && that_present_num1))
        return false;
      if (this.num1 != that.num1)
        return false;
    }

    boolean this_present_num2 = true;
    boolean that_present_num2 = true;
    if (this_present_num2 || that_present_num2) {
      if (!(this_present_num2 && that_present_num2))
        return false;
      if (this.num2 != that.num2)
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_dates = true && this.isSetDates();
    boolean that_present_dates = true && that.isSetDates();
    if (this_present_dates || that_present_dates) {
      if (!(this_present_dates && that_present_dates))
        return false;
      if (!this.dates.equals(that.dates))
        return false;
    }

    boolean this_present_tasks = true && this.isSetTasks();
    boolean that_present_tasks = true && that.isSetTasks();
    if (this_present_tasks || that_present_tasks) {
      if (!(this_present_tasks && that_present_tasks))
        return false;
      if (!this.tasks.equals(that.tasks))
        return false;
    }

    boolean this_present_mapping = true && this.isSetMapping();
    boolean that_present_mapping = true && that.isSetMapping();
    if (this_present_mapping || that_present_mapping) {
      if (!(this_present_mapping && that_present_mapping))
        return false;
      if (!this.mapping.equals(that.mapping))
        return false;
    }

    boolean this_present_codes = true && this.isSetCodes();
    boolean that_present_codes = true && that.isSetCodes();
    if (this_present_codes || that_present_codes) {
      if (!(this_present_codes && that_present_codes))
        return false;
      if (!this.codes.equals(that.codes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(workid);

    hashCode = hashCode * 8191 + num1;

    hashCode = hashCode * 8191 + num2;

    hashCode = hashCode * 8191 + ((isSetOp()) ? 131071 : 524287);
    if (isSetOp())
      hashCode = hashCode * 8191 + op.getValue();

    hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191 + comment.hashCode();

    hashCode = hashCode * 8191 + ((isSetDates()) ? 131071 : 524287);
    if (isSetDates())
      hashCode = hashCode * 8191 + dates.hashCode();

    hashCode = hashCode * 8191 + ((isSetTasks()) ? 131071 : 524287);
    if (isSetTasks())
      hashCode = hashCode * 8191 + tasks.hashCode();

    hashCode = hashCode * 8191 + ((isSetMapping()) ? 131071 : 524287);
    if (isSetMapping())
      hashCode = hashCode * 8191 + mapping.hashCode();

    hashCode = hashCode * 8191 + ((isSetCodes()) ? 131071 : 524287);
    if (isSetCodes())
      hashCode = hashCode * 8191 + codes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Work other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWorkid()).compareTo(other.isSetWorkid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workid, other.workid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum1()).compareTo(other.isSetNum1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, other.num1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum2()).compareTo(other.isSetNum2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, other.num2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDates()).compareTo(other.isSetDates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dates, other.dates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTasks()).compareTo(other.isSetTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tasks, other.tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMapping()).compareTo(other.isSetMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapping, other.mapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCodes()).compareTo(other.isSetCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codes, other.codes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Work(");
    boolean first = true;

    sb.append("workid:");
    sb.append(this.workid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num1:");
    sb.append(this.num1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num2:");
    sb.append(this.num2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    if (this.op == null) {
      sb.append("null");
    } else {
      sb.append(this.op);
    }
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetDates()) {
      if (!first) sb.append(", ");
      sb.append("dates:");
      if (this.dates == null) {
        sb.append("null");
      } else {
        sb.append(this.dates);
      }
      first = false;
    }
    if (isSetTasks()) {
      if (!first) sb.append(", ");
      sb.append("tasks:");
      if (this.tasks == null) {
        sb.append("null");
      } else {
        sb.append(this.tasks);
      }
      first = false;
    }
    if (isSetMapping()) {
      if (!first) sb.append(", ");
      sb.append("mapping:");
      if (this.mapping == null) {
        sb.append("null");
      } else {
        sb.append(this.mapping);
      }
      first = false;
    }
    if (isSetCodes()) {
      if (!first) sb.append(", ");
      sb.append("codes:");
      if (this.codes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.codes, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WorkStandardScheme getScheme() {
      return new WorkStandardScheme();
    }
  }

  private static class WorkStandardScheme extends org.apache.thrift.scheme.StandardScheme<Work> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Work struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 8: // WORKID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.workid = iprot.readI64();
              struct.setWorkidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // NUM1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num1 = iprot.readI32();
              struct.setNum1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num2 = iprot.readI32();
              struct.setNum2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = org.apache.flink.flinkformats.flinkthrift.tests.Operation.findByValue(iprot.readI32());
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.dates = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.dates.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.tasks = new java.util.HashSet<Task>(2*_set3.size);
                @org.apache.thrift.annotation.Nullable Task _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = new Task();
                  _elem4.read(iprot);
                  struct.tasks.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.mapping = new java.util.HashMap<java.lang.Long,java.lang.Long>(2*_map6.size);
                long _key7;
                long _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readI64();
                  _val8 = iprot.readI64();
                  struct.mapping.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.codes = iprot.readBinary();
              struct.setCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Work struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM1_FIELD_DESC);
      oprot.writeI32(struct.num1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM2_FIELD_DESC);
      oprot.writeI32(struct.num2);
      oprot.writeFieldEnd();
      if (struct.op != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        oprot.writeI32(struct.op.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dates != null) {
        if (struct.isSetDates()) {
          oprot.writeFieldBegin(DATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dates.size()));
            for (java.lang.String _iter10 : struct.dates)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tasks != null) {
        if (struct.isSetTasks()) {
          oprot.writeFieldBegin(TASKS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.tasks.size()));
            for (Task _iter11 : struct.tasks)
            {
              _iter11.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mapping != null) {
        if (struct.isSetMapping()) {
          oprot.writeFieldBegin(MAPPING_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, struct.mapping.size()));
            for (java.util.Map.Entry<java.lang.Long, java.lang.Long> _iter12 : struct.mapping.entrySet())
            {
              oprot.writeI64(_iter12.getKey());
              oprot.writeI64(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(WORKID_FIELD_DESC);
      oprot.writeI64(struct.workid);
      oprot.writeFieldEnd();
      if (struct.codes != null) {
        if (struct.isSetCodes()) {
          oprot.writeFieldBegin(CODES_FIELD_DESC);
          oprot.writeBinary(struct.codes);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WorkTupleScheme getScheme() {
      return new WorkTupleScheme();
    }
  }

  private static class WorkTupleScheme extends org.apache.thrift.scheme.TupleScheme<Work> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Work struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWorkid()) {
        optionals.set(0);
      }
      if (struct.isSetNum1()) {
        optionals.set(1);
      }
      if (struct.isSetNum2()) {
        optionals.set(2);
      }
      if (struct.isSetOp()) {
        optionals.set(3);
      }
      if (struct.isSetComment()) {
        optionals.set(4);
      }
      if (struct.isSetDates()) {
        optionals.set(5);
      }
      if (struct.isSetTasks()) {
        optionals.set(6);
      }
      if (struct.isSetMapping()) {
        optionals.set(7);
      }
      if (struct.isSetCodes()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetWorkid()) {
        oprot.writeI64(struct.workid);
      }
      if (struct.isSetNum1()) {
        oprot.writeI32(struct.num1);
      }
      if (struct.isSetNum2()) {
        oprot.writeI32(struct.num2);
      }
      if (struct.isSetOp()) {
        oprot.writeI32(struct.op.getValue());
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetDates()) {
        {
          oprot.writeI32(struct.dates.size());
          for (java.lang.String _iter13 : struct.dates)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetTasks()) {
        {
          oprot.writeI32(struct.tasks.size());
          for (Task _iter14 : struct.tasks)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetMapping()) {
        {
          oprot.writeI32(struct.mapping.size());
          for (java.util.Map.Entry<java.lang.Long, java.lang.Long> _iter15 : struct.mapping.entrySet())
          {
            oprot.writeI64(_iter15.getKey());
            oprot.writeI64(_iter15.getValue());
          }
        }
      }
      if (struct.isSetCodes()) {
        oprot.writeBinary(struct.codes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Work struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.workid = iprot.readI64();
        struct.setWorkidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.num1 = iprot.readI32();
        struct.setNum1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.num2 = iprot.readI32();
        struct.setNum2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.op = org.apache.flink.flinkformats.flinkthrift.tests.Operation.findByValue(iprot.readI32());
        struct.setOpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.dates = new java.util.ArrayList<java.lang.String>(_list16.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readString();
            struct.dates.add(_elem17);
          }
        }
        struct.setDatesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tasks = new java.util.HashSet<Task>(2*_set19.size);
          @org.apache.thrift.annotation.Nullable Task _elem20;
          for (int _i21 = 0; _i21 < _set19.size; ++_i21)
          {
            _elem20 = new Task();
            _elem20.read(iprot);
            struct.tasks.add(_elem20);
          }
        }
        struct.setTasksIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mapping = new java.util.HashMap<java.lang.Long,java.lang.Long>(2*_map22.size);
          long _key23;
          long _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readI64();
            _val24 = iprot.readI64();
            struct.mapping.put(_key23, _val24);
          }
        }
        struct.setMappingIsSet(true);
      }
      if (incoming.get(8)) {
        struct.codes = iprot.readBinary();
        struct.setCodesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

