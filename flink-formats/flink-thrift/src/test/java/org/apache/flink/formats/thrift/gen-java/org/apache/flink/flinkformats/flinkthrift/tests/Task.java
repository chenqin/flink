/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.flink.flinkformats.flinkthrift.tests;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-19")
public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.io.Serializable, Cloneable, Comparable<Task> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Task");

  private static final org.apache.thrift.protocol.TField TASKID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ISURGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isurgent", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WORKID_FIELD_DESC = new org.apache.thrift.protocol.TField("workid", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaskStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaskTupleSchemeFactory();

  public long taskid; // required
  public boolean isurgent; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String date; // optional
  public long workid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASKID((short)4, "taskid"),
    ISURGENT((short)1, "isurgent"),
    DATE((short)2, "date"),
    WORKID((short)3, "workid");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 4: // TASKID
          return TASKID;
        case 1: // ISURGENT
          return ISURGENT;
        case 2: // DATE
          return DATE;
        case 3: // WORKID
          return WORKID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __ISURGENT_ISSET_ID = 1;
  private static final int __WORKID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATE,_Fields.WORKID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASKID, new org.apache.thrift.meta_data.FieldMetaData("taskid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ISURGENT, new org.apache.thrift.meta_data.FieldMetaData("isurgent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKID, new org.apache.thrift.meta_data.FieldMetaData("workid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Task.class, metaDataMap);
  }

  public Task() {
  }

  public Task(
    long taskid,
    boolean isurgent)
  {
    this();
    this.taskid = taskid;
    setTaskidIsSet(true);
    this.isurgent = isurgent;
    setIsurgentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Task(Task other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskid = other.taskid;
    this.isurgent = other.isurgent;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.workid = other.workid;
  }

  public Task deepCopy() {
    return new Task(this);
  }

  @Override
  public void clear() {
    setTaskidIsSet(false);
    this.taskid = 0;
    setIsurgentIsSet(false);
    this.isurgent = false;
    this.date = null;
    setWorkidIsSet(false);
    this.workid = 0;
  }

  public long getTaskid() {
    return this.taskid;
  }

  public Task setTaskid(long taskid) {
    this.taskid = taskid;
    setTaskidIsSet(true);
    return this;
  }

  public void unsetTaskid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskid is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public boolean isIsurgent() {
    return this.isurgent;
  }

  public Task setIsurgent(boolean isurgent) {
    this.isurgent = isurgent;
    setIsurgentIsSet(true);
    return this;
  }

  public void unsetIsurgent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISURGENT_ISSET_ID);
  }

  /** Returns true if field isurgent is set (has been assigned a value) and false otherwise */
  public boolean isSetIsurgent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISURGENT_ISSET_ID);
  }

  public void setIsurgentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISURGENT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDate() {
    return this.date;
  }

  public Task setDate(@org.apache.thrift.annotation.Nullable java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public long getWorkid() {
    return this.workid;
  }

  public Task setWorkid(long workid) {
    this.workid = workid;
    setWorkidIsSet(true);
    return this;
  }

  public void unsetWorkid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WORKID_ISSET_ID);
  }

  /** Returns true if field workid is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WORKID_ISSET_ID);
  }

  public void setWorkidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WORKID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TASKID:
      if (value == null) {
        unsetTaskid();
      } else {
        setTaskid((java.lang.Long)value);
      }
      break;

    case ISURGENT:
      if (value == null) {
        unsetIsurgent();
      } else {
        setIsurgent((java.lang.Boolean)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    case WORKID:
      if (value == null) {
        unsetWorkid();
      } else {
        setWorkid((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASKID:
      return getTaskid();

    case ISURGENT:
      return isIsurgent();

    case DATE:
      return getDate();

    case WORKID:
      return getWorkid();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASKID:
      return isSetTaskid();
    case ISURGENT:
      return isSetIsurgent();
    case DATE:
      return isSetDate();
    case WORKID:
      return isSetWorkid();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Task)
      return this.equals((Task)that);
    return false;
  }

  public boolean equals(Task that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskid = true;
    boolean that_present_taskid = true;
    if (this_present_taskid || that_present_taskid) {
      if (!(this_present_taskid && that_present_taskid))
        return false;
      if (this.taskid != that.taskid)
        return false;
    }

    boolean this_present_isurgent = true;
    boolean that_present_isurgent = true;
    if (this_present_isurgent || that_present_isurgent) {
      if (!(this_present_isurgent && that_present_isurgent))
        return false;
      if (this.isurgent != that.isurgent)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_workid = true && this.isSetWorkid();
    boolean that_present_workid = true && that.isSetWorkid();
    if (this_present_workid || that_present_workid) {
      if (!(this_present_workid && that_present_workid))
        return false;
      if (this.workid != that.workid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(taskid);

    hashCode = hashCode * 8191 + ((isurgent) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkid()) ? 131071 : 524287);
    if (isSetWorkid())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(workid);

    return hashCode;
  }

  @Override
  public int compareTo(Task other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTaskid()).compareTo(other.isSetTaskid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskid, other.taskid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsurgent()).compareTo(other.isSetIsurgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsurgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isurgent, other.isurgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWorkid()).compareTo(other.isSetWorkid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workid, other.workid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Task(");
    boolean first = true;

    sb.append("taskid:");
    sb.append(this.taskid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isurgent:");
    sb.append(this.isurgent);
    first = false;
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetWorkid()) {
      if (!first) sb.append(", ");
      sb.append("workid:");
      sb.append(this.workid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskStandardScheme getScheme() {
      return new TaskStandardScheme();
    }
  }

  private static class TaskStandardScheme extends org.apache.thrift.scheme.StandardScheme<Task> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Task struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 4: // TASKID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskid = iprot.readI64();
              struct.setTaskidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // ISURGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isurgent = iprot.readBool();
              struct.setIsurgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORKID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.workid = iprot.readI64();
              struct.setWorkidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Task struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ISURGENT_FIELD_DESC);
      oprot.writeBool(struct.isurgent);
      oprot.writeFieldEnd();
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWorkid()) {
        oprot.writeFieldBegin(WORKID_FIELD_DESC);
        oprot.writeI64(struct.workid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASKID_FIELD_DESC);
      oprot.writeI64(struct.taskid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskTupleScheme getScheme() {
      return new TaskTupleScheme();
    }
  }

  private static class TaskTupleScheme extends org.apache.thrift.scheme.TupleScheme<Task> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Task struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTaskid()) {
        optionals.set(0);
      }
      if (struct.isSetIsurgent()) {
        optionals.set(1);
      }
      if (struct.isSetDate()) {
        optionals.set(2);
      }
      if (struct.isSetWorkid()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTaskid()) {
        oprot.writeI64(struct.taskid);
      }
      if (struct.isSetIsurgent()) {
        oprot.writeBool(struct.isurgent);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetWorkid()) {
        oprot.writeI64(struct.workid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Task struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.taskid = iprot.readI64();
        struct.setTaskidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isurgent = iprot.readBool();
        struct.setIsurgentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.workid = iprot.readI64();
        struct.setWorkidIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

